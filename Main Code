import * as React from 'react';
import { Text, View, StyleSheet, Button, ImageStore } from 'react-native';
import Constants from 'expo-constants';
import axios from 'axios';
import { NativeModules } from 'react-native';
import * as FileSystem from 'expo-file-system';
// import RNFetchBlob from "react-native-fetch-blob";
// import ImageEditor from '@react-native-community/image-editor';
import ImgToBase64 from 'react-native-image-base64';
import { Asset } from 'expo-asset';
import * as ImageManipulator from 'expo-image-manipulator';
``;

export default class App extends React.Component {
  state = {
    img: '',
    ready: false,
    image: null,
    data: null,
  };

  func() {
    axios({
      method: 'POST',
      url: 'https://api.facesoft.io/v1/face/landmarks',
      headers: {
        'content-type': 'application/json',
        apikey: 'yymicedmf1e-skuwk3c0hf',
        accept: 'application/json',
      },
      data: {
        image1:
          '',
      },
    })
      .then(response => {
        console.log('res');
        console.log(response);
        this.setState({ data: response });
      })
      .catch(error => {
        console.log(error.response);
      });
  }

  func2(bas) {
    axios({
      method: 'POST',
      url: 'https://api.facesoft.io/v1/face/landmarks',
      headers: {
        'content-type': 'application/json',
        apikey: 'yymicedmf1e-skuwk3c0hf',
        accept: 'application/json',
      },
      data: {
        image1: bas,
      },
    })
      .then(response => {
        console.log(response);
      })
      .catch(error => {
        console.log(error.response);
      });
  }

  ratio() {
    const arr = this.state.data.data[0].landmarks.landmarks.points;
    console.log('arr:');
    console.log(arr);

    const cjwr = this.dist(arr[0], arr[16]) / this.dist(arr[4], arr[12]);
    const whr =
      this.dist(arr[4], arr[12]) /
      this.dist(
        (arr[62] + arr[66]) / 2,
        ((arr[37] + arr[38]) / 2 + (arr[43] + arr[44]) / 2) / 2
      );
    const es = (this.dist(arr[36], arr[45]) - this.dist(arr[39], arr[42])) / 2;
    const lfh =
      Math.abs(arr[0][1] - arr[8][1]) /
      (Math.abs(arr[0][1] - arr[8][1]) +
        ((arr[36][0] - arr[45][0]) / 2) *
          Math.abs((arr[19][1] - arr[36][1]) / (arr[19][0] - arr[36][0])));
    const fwh =
      Math.abs(arr[0][0] - arr[16][0]) / Math.abs(arr[0][1] - arr[8][1]);
    const meh =
      this.dist(arr[17], arr[36]) +
      this.dist(arr[21], arr[39]) +
      this.dist(arr[22], arr[42]) +
      this.dist(arr[26], arr[45]) +
      this.dist(arr [19], [
        (arr[37][0] + arr[38][0]) / 2,
        (arr[37][1] + arr[38][1]) / 2,
      ]) +
      this.dist(arr[24], [
        (arr[43][0] + arr[44][0]) / 2,
        (arr[43][1] + arr[44][1]) / 2,
      ]);
    var X = [arr[0][0], arr[4][0], arr[8][0], arr[12][0], arr[16][0]];
    var Y = [arr[0][1], arr[4][1], arr[8][1], arr[12][1], arr[16][1]];
    const peri =
      this.dist(arr[0], arr[4]) +
      this.dist(arr[8], arr[4]) +
      this.dist(arr[12], arr[8]) +
      this.dist(arr[12], arr[16]) +
      this.dist(arr[0], arr[16]);
    const par = this.polygonArea(X, Y, 5);
    {
      var area = 0; // Accumulates area in the loop
      var j = 4; // The last vertex is the 'previous' one to the first

      for (var i = 0; i < 5; i++) {
        area = area + (X[j] + X[i]) * (Y[j] - Y[i]);
        j = i; //j is previous vertex to i
      }
      return area / 2;
    }
  }

  dist(x, y) {
    var length = Math.sqrt(Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2));

    return length;
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.paragraph}>
          Change code in the editor and watch it change on your phone! Save to
          get a shareable url.
        </Text>
        <Button
          title="Press"
          onPress={() => {
            this.func();
            
          }}
        />
        <Text>{'\n'}</Text>
        <Button
          title="Ratio"
          onPress={() => {
            this.ratio();
          }}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: Constants.statusBarHeight,
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
  paragraph: {
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
});
